#!/usr/bin/env python3

#
# Run the test, check it completed successfully
#

from boututils.run_wrapper import shell, shell_safe, launch_safe
from boutdata.collect import collect
from boutdata.data import BoutData
from sys import stdout, exit
import numpy as np

shell("ln -s ../../../hermes-3 hermes-3")

# Run the case
s, out = launch_safe("./hermes-3", nproc=1, mthread=1, pipe=True)
with open("run.log", "w") as f:
  f.write(out)

# Open the dataset
outputs = BoutData("data")["outputs"]

# Check that the coefficients and sources have been saved
# for the neutral species

# Deuterium atoms
assert "Dd_Dpar" in outputs.keys()
assert "Sd_Dpar" in outputs.keys()
assert "Ed_Dpar" in outputs.keys()
assert "Fd_Dpar" in outputs.keys()

# Helium atoms
assert "Dhe_Dpar" in outputs.keys()
assert "She_Dpar" in outputs.keys()
assert "Ehe_Dpar" in outputs.keys()
assert "Fhe_Dpar" in outputs.keys()

# No diffusion for charged species
assert "Dd+_Dpar" not in outputs.keys()
assert "Sd+_Dpar" not in outputs.keys()
assert "Ed+_Dpar" not in outputs.keys()
assert "Fd+_Dpar" not in outputs.keys()

# Check that the sources and sinks are not zero,
# but they sum to zero over the domain

for name in ["Sd_Dpar", "Ed_Dpar", "Fd_Dpar"]:
  s = outputs[name]
  print(name, np.amax(np.abs(s)), np.abs(np.sum(s)))

  # Not zero
  assert np.amax(np.abs(s)) > 1

  # Sum is zero
  assert np.abs(np.sum(s)) < 1e-9

exit(0)
